---
import type { CollectionEntry } from "astro:content";
import { marked } from 'marked';
import { withBase } from "../utils/basePath";
import BlogPostHeroImage from "./BlogPostHeroImage.astro";
import FormattedDate from "./FormattedDate.astro";

interface Props {
  id: string;
  post: CollectionEntry<"posts">["data"];
}

const { post, id } = Astro.props;

const markedTitle = await marked.parseInline(post.title);
const markedDescription = await marked.parseInline(post.description);
---

<a href={withBase(`/posts/${id}/`)} class="post">
  <BlogPostHeroImage
    class="img"
    image={post.heroImage}
  />
  <div class="content">
    <h2 class="title markdown" set:html={markedTitle} />
    <p class="description markdown" set:html={markedDescription} />
    <FormattedDate class="date" date={post.pubDate} />
  </div>
</a>

<style>
.post {
  text-decoration: none;
  color: currentColor;
  gap: 1.5rem 1.5rem;
  display: grid;
  @media screen and (min-width: 40rem) {
    grid-template-columns: 12rem 1fr;
    grid-template-areas:
      "img content"
      "img content"
    ;
  }

  padding: 1rem;
  border-radius: 0.5rem;

  cursor: default;
  transition: background-color 0.15s ease-out;
  background-color: rgba(235,235,235, 0);
  @media (hover: hover) and (pointer: fine) {
    &:hover {
      background-color: rgba(235,235,235, 1);
    }
    &:active {
      background-color: rgba(220,220,220, 1);
    }
  }
  &:focus-visible {
    outline: 0.25rem solid rgb(151, 188, 247);
  }
}
.post :global(*) {
}
.post :global(.date) {
  font-size: 0.9rem;
  &::before {
    content: "Published on ";
    display: inline-block;
  }
}
.content {
  display: grid;
  row-gap: 1rem;
  grid-template-columns: auto;
  grid-template-rows: auto auto auto;
}

.title {
  font-size: 1.25rem;
  line-height: 1.125;
  font-weight: normal;
  margin: 0;
}

.description {
  font-size: 1rem;
  line-height: 1.5;
  opacity: 0.9;
}

.post :global(.img) {
  width: 100%;
  border-radius: 0.24rem;
  box-shadow: none;
}
</style>
